{"version":3,"sources":["webpack:///./app.js","webpack:///./app.rotas.js","webpack:///./app.constants.js","webpack:///./app.layout.js","webpack:///../assets/plugins/md-data-table \\.js$","webpack:///../assets/plugins/md-data-table/js/fixed-table-header.js","webpack:///../assets/plugins/md-data-table/js/md-data-table.js","webpack:///./directives \\.js$","webpack:///./services \\.js$","webpack:///./services/pessoaService.js","webpack:///./services/tarefaService.js","webpack:///./comum \\.js$","webpack:///./comum/views/home.js","webpack:///./cadastros \\.js$","webpack:///./cadastros/Pessoa/views/index.js","webpack:///./cadastros/Pessoa/views/modal.js","webpack:///./cadastros/Tarefa/views/index.js","webpack:///./cadastros/Tarefa/views/modal.js"],"names":[],"mappings":";;;;;;;;;;;;;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,+E;;;;;;;AChCA;AAAA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;;;;;;;;ACpBA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wE;;;;;;;AClBA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qCAAqC,oDAAoD;AACzF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,mEAAmE;AACnE,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,mEAAmE;AACnE,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC,sCAAsC;AACtE,iBAAiB;AACjB;AACA,KAAK;AACL;;;AAGA;AACA;AACA;;AAEA,wE;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sB;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB,qCAAqC;AAC1D;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,6CAA6C;AACpE;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC,mB;;;;;;AC9HD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA,+CAA+C,qBAAqB;AACpE;AACA,8EAA8E,MAAM;AACpF;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA,qLAAqL,+BAA+B;AACpN,uIAAuI,wCAAwC;AAC/K;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB,KAAK,mBAAmB,GAAG,sBAAsB,GAAG,mBAAmB;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;;AAGD;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA,2BAA2B,uBAAuB;AAClD,KAAK;;AAEL;AACA,gCAAgC,mBAAmB;AACnD,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD,iCAAiC;AACnF,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6DAA6D;AAC7D;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,gEAAgE,mBAAmB;AACnF;AACA;AACA,kFAAkF,aAAa;AAC/F;AACA,6EAA6E,KAAK,IAAI,SAAS;AAC/F;AACA;AACA;AACA;AACA;AACA,kEAAkE,QAAQ;AAC1E,iEAAiE,IAAI;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B;;AAE/B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA,sCAAsC;AACtC,GAAG;;AAEH;AACA,sCAAsC;AACtC,GAAG;;AAEH;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oCAAoC,SAAS;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,CAAC,mB;;;;;;AC78CD;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA,4B;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uB;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,CAAC,I;;;;;;ACrCD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,CAAC,I;;;;;;AC/CD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uB;;;;;;ACjBA;AACA;AACA;AACA;;AAEA,KAAK;AACL,CAAC,I;;;;;;ACND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uB;;;;;;ACpBA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;;;AAGb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;;AAExB;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,iDAAiD,kEAAkE;;AAEnH;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,CAAC,I;;;;;;ACpED;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,qBAAqB;AACrB,qDAAqD,6DAA6D;;AAElH;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA,CAAC,I;;;;;;AChCD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB,qDAAqD,kEAAkE;;AAEvH;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;;AAEjB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;;AAExB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,iDAAiD,kEAAkE;;AAEnH;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,CAAC,I;;;;;;AC7FD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,6EAA6E;;AAE9H;AACA;AACA,qBAAqB;;AAErB,2DAA2D;AAC3D,iBAAiB;AACjB,iDAAiD,kEAAkE;;AAEnH;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qDAAqD,kEAAkE;;AAEvH;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA,CAAC,I","file":"app.bundle.js","sourcesContent":["﻿\r\nimport rotas from './app.rotas';\r\nimport constants from './app.constants';\r\nimport layout from './app.layout';\r\n\r\nfunction requireAll(r) {\r\n    r.keys().forEach(r);\r\n}\r\n\r\nrequireAll(require.context('../assets/plugins/md-data-table', true, /\\.js$/));\r\n\r\nvar appModule = angular.module(\"orpak\", [\r\n    'ui.router',\r\n    'ngMaterial',\r\n    'ngCookies',\r\n    'ngMessages',\r\n    'ngSanitize',\r\n    'cgBusy',\r\n    'oc.lazyLoad',\r\n    'ngTouch',\r\n    'md.data.table',\r\n    'fixed.table.header'\r\n]);\r\n\r\n\r\nrequireAll(require.context('./directives', true, /\\.js$/));\r\nrequireAll(require.context('./services', true, /\\.js$/));\r\nrequireAll(require.context('./comum', true, /\\.js$/));\r\nrequireAll(require.context('./cadastros', true, /\\.js$/));\r\n\r\nconstants.config(appModule);\r\nappModule.config(rotas);\r\nlayout.config(appModule);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app.js\n// module id = 3\n// module chunks = 0","﻿rotas.$inject = ['$stateProvider', '$urlRouterProvider'];\r\n\r\nexport default function rotas($stateProvider, $urlRouterProvider) {\r\n\r\n    $urlRouterProvider.otherwise(\"/\");\r\n\r\n    $stateProvider.state('inicio', {\r\n        url: '/',\r\n        templateUrl: 'app/comum/views/home.html'\r\n    });\r\n\r\n    $stateProvider.state('pessoas', {\r\n        url: '/pessoas',\r\n        templateUrl: 'app/cadastros/pessoa/views/index.html'\r\n    });\r\n\r\n    $stateProvider.state('tarefas', {\r\n        url: '/tarefas',\r\n        templateUrl: 'app/cadastros/tarefa/views/index.html'\r\n    });\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app.rotas.js\n// module id = 4\n// module chunks = 0","﻿var constants = [];\r\n\r\nvar serviceBase = 'http://orpakdemo-api.azurewebsites.net/api/';\r\n\r\n\r\nconstants.push({\r\n    key: 'ngAuthSettings', value: {\r\n        apiServiceBaseUri: serviceBase\r\n    }\r\n});\r\n\r\nvar configuration = {\r\n    config: function (appModule) {\r\n        constants.forEach(function (constant) {\r\n            appModule.constant(constant.key, constant.value);\r\n        });\r\n    }\r\n};\r\nexport default configuration;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app.constants.js\n// module id = 5\n// module chunks = 0","﻿function layout(appModule) {\r\n\r\n    /* Configure ocLazyLoader(refer: https://github.com/ocombe/ocLazyLoad) */\r\n    appModule.config(['$ocLazyLoadProvider', function ($ocLazyLoadProvider) {\r\n        $ocLazyLoadProvider.config({\r\n            cssFilesInsertBefore: 'ng_load_plugins_before' \r\n        });\r\n    }]);\r\n\r\n    appModule.controller('comum.views.inicio', ['$scope', '$rootScope', '$state', '$mdMedia', '$mdDialog', '$location', '$mdSidenav',\r\n            function ($scope, $rootScope, $state, $mdMedia, $mdDialog, $location, $mdSidenav) {\r\n                var vm = this;\r\n\r\n                vm.openMenu = function ($mdOpenMenu, ev) {\r\n                    $mdOpenMenu(ev);\r\n                };\r\n\r\n                vm.menuPrincipal = [{ nome: 'Tarefas', icon: 'settings', url: 'tarefas' }];\r\n                vm.selectedMode = 'md-fab md-fab-bottom-right md-fling';\r\n\r\n                vm.abrir = function (url) {\r\n                    $state.go(url);\r\n                }\r\n\r\n                vm.delay = 0;\n                vm.minDuration = 0;\n                vm.message = 'Aguarde...';\n                vm.backdrop = true;\n                vm.loading = null;\n                vm.resultado = null;\r\n\r\n                vm.abrirModal = function (ev) {\r\n                    var useFullScreen = ($mdMedia('sm') || $mdMedia('xs')) && $scope.customFullscreen;\r\n\r\n                    if ($location.path() == \"/pessoas\") {\r\n                        $mdDialog.show({\r\n                            templateUrl: 'cadastro.html',\r\n                            controller: 'cadastros.views.modalPessoa as vm',\r\n                            parent: angular.element(document.body),\r\n                            targetEvent: ev,\r\n                            fullscreen: useFullScreen,\r\n                            locals: {\r\n                                pessoaId: 0\r\n                            }\r\n                        }).then(function () {\r\n                            $rootScope.$emit(\"CallParentMethod\", {});\r\n                        });\r\n                    }\r\n                    else if ($location.path() == \"/tarefas\") {\r\n                        $mdDialog.show({\r\n                            templateUrl: 'cadastro.html',\r\n                            controller: 'cadastros.views.modalAmbiente as vm',\r\n                            parent: angular.element(document.body),\r\n                            targetEvent: ev,\r\n                            fullscreen: useFullScreen,\r\n                            locals: {\r\n                                ambienteId: 0\r\n                            }\r\n                        }).then(function () {\r\n                            $rootScope.$emit(\"CallParentMethod\", {});\r\n                        });\r\n                    }\r\n                };\r\n            }\r\n    ]);\r\n\r\n    appModule.controller('comum.views.header', ['$scope', '$mdSidenav', '$mdDialog','$mdMedia', \r\n        function ($scope, $mdSidenav, $mdDialog, $mdMedia) {\r\n            var vm = this;\r\n            vm.toggleSidenav = function (menu) {\r\n                $mdSidenav(menu).toggle();\r\n            }\r\n\r\n            vm.menuSetup = {\r\n                menus: [{\r\n                    nome: 'Usuários', icon: 'message', width: '4',\r\n                    submenus: [{ nome: 'Cadastro Usuários', link: '' }]\r\n                }]\r\n            }\r\n    }]);\r\n};\r\n\r\n\r\nvar configuration = {\r\n    config: layout\r\n};\r\n\r\nexport default configuration;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app.layout.js\n// module id = 6\n// module chunks = 0","var map = {\n\t\"./js/fixed-table-header.js\": 8,\n\t\"./js/md-data-table.js\": 9\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 7;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../assets/plugins/md-data-table \\.js$\n// module id = 7\n// module chunks = 0","/*\n * Angular Fixed Table Header\n * https://github.com/daniel-nagy/fixed-table-header\n * @license MIT\n * v0.2.1\n */\n(function (window, angular, undefined) {\n'use strict';\n\nangular.module('fixed.table.header', []).directive('fixHead', fixHead);\n\nfunction fixHead($compile, $window) {\n  \n  function compile(tElement) {\n    var table = {\n      clone: tElement.parent().clone().empty(),\n      original: tElement.parent()\n    };\n    \n    var header = {\n      clone: tElement.clone(),\n      original: tElement\n    };\n    \n    // prevent recursive compilation\n    header.clone.removeAttr('fix-head').removeAttr('ng-if');\n    \n    table.clone.css({display: 'block', overflow: 'hidden'}).addClass('clone');\n    header.clone.css('display', 'block');\n    header.original.css('visibility', 'hidden');\n    \n    return function postLink(scope) {\n      var scrollContainer = table.original.parent();\n      \n      // insert the element so when it is compiled it will link\n      // with the correct scope and controllers\n      header.original.after(header.clone);\n      \n      $compile(table.clone)(scope);\n      $compile(header.clone)(scope);\n      \n      scrollContainer.parent()[0].insertBefore(table.clone.append(header.clone)[0], scrollContainer[0]);\n      \n      scrollContainer.on('scroll', function () {\n        // use CSS transforms to move the cloned header when the table is scrolled horizontally\n        header.clone.css('transform', 'translate3d(' + -(scrollContainer.prop('scrollLeft')) + 'px, 0, 0)');\n      });\n      \n      function cells() {\n        return header.clone.find('th').length;\n      }\n      \n      function getCells(node) {\n        return Array.prototype.map.call(node.find('th'), function (cell) {\n          return jQLite(cell);\n        });\n      }\n      \n      function height() {\n        return header.original.prop('clientHeight');\n      }\n      \n      function jQLite(node) {\n        return angular.element(node);\n      }\n      \n      function marginTop(height) {\n        table.original.css('marginTop', '-' + height + 'px');\n      }\n      \n      function updateCells() {\n        var cells = {\n          clone: getCells(header.clone),\n          original: getCells(header.original)\n        };\n        \n        cells.clone.forEach(function (clone, index) {\n          if(clone.data('isClone')) {\n            return;\n          }\n          \n          // prevent duplicating watch listeners\n          clone.data('isClone', true);\n          \n          var cell = cells.original[index];\n          var style = $window.getComputedStyle(cell[0]);\n          \n          var getWidth = function () {\n            return style.width;\n          };\n          \n          var setWidth = function () {\n            marginTop(height());\n            clone.css({minWidth: style.width, maxWidth: style.width});\n          };\n          \n          var listener = scope.$watch(getWidth, setWidth);\n          \n          $window.addEventListener('resize', setWidth);\n          \n          clone.on('$destroy', function () {\n            listener();\n            $window.removeEventListener('resize', setWidth);\n          });\n          \n          cell.on('$destroy', function () {\n            clone.remove();\n          });\n        });\n      }\n      \n      scope.$watch(cells, updateCells);\n      \n      header.original.on('$destroy', function () {\n        header.clone.remove();\n      });\n    };\n  }\n  \n  return {\n    compile: compile\n  };\n}\n\nfixHead.$inject = ['$compile', '$window'];\n\n})(window, angular);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../assets/plugins/md-data-table/js/fixed-table-header.js\n// module id = 8\n// module chunks = 0","/*\n * Angular Material Data Table\n * https://github.com/daniel-nagy/md-data-table\n * @license MIT\n * v0.10.9\n */\n(function (window, angular, undefined) {\n'use strict';\n\nangular.module('md.table.templates', ['md-table-pagination.html', 'md-table-progress.html', 'arrow-up.svg', 'navigate-before.svg', 'navigate-first.svg', 'navigate-last.svg', 'navigate-next.svg']);\n\nangular.module('md-table-pagination.html', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('md-table-pagination.html',\n    '<div class=\"page-select\" ng-if=\"$pagination.showPageSelect()\">\\n' +\n    '  <div class=\"\">{{$pagination.label.page}}</div>\\n' +\n    '\\n' +\n    '  <md-select virtual-page-select total=\"{{$pagination.pages()}}\" class=\"md-table-select\" ng-model=\"$pagination.page\" md-container-class=\"md-pagination-select\" ng-change=\"$pagination.onPaginationChange()\" ng-disabled=\"$pagination.disabled\" aria-label=\"Page\">\\n' +\n    '    <md-content>\\n' +\n    '      <md-option ng-repeat=\"page in $pageSelect.pages\" ng-value=\"page\">{{page}}</md-option>\\n' +\n    '    </md-content>\\n' +\n    '  </md-select>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<div class=\"limit-select\" ng-if=\"$pagination.limitOptions\">\\n' +\n    '  <div class=\"\">{{$pagination.label.rowsPerPage}}</div>\\n' +\n    '\\n' +\n    '  <md-select class=\"md-table-select\" ng-model=\"$pagination.limit\" md-container-class=\"md-pagination-select\" ng-disabled=\"$pagination.disabled\" aria-label=\"Rows\" placeholder=\"{{ $pagination.limitOptions[0] }}\">\\n' +\n    '    <md-option ng-repeat=\"option in $pagination.limitOptions\" ng-value=\"option.value ? $pagination.eval(option.value) : option\">{{::option.label ? option.label : option}}</md-option>\\n' +\n    '  </md-select>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<div class=\"buttons\">\\n' +\n    '  <div class=\"\">{{$pagination.min()}} - {{$pagination.max()}} {{$pagination.label.of}} {{$pagination.total}}</div>\\n' +\n    '\\n' +\n    '  <md-button class=\"md-icon-button\" type=\"button\" ng-if=\"$pagination.showBoundaryLinks()\" ng-click=\"$pagination.first()\" ng-disabled=\"$pagination.disabled || !$pagination.hasPrevious()\" aria-label=\"First\">\\n' +\n    '    <md-icon md-svg-icon=\"navigate-first.svg\"></md-icon>\\n' +\n    '  </md-button>\\n' +\n    '\\n' +\n    '  <md-button class=\"md-icon-button\" type=\"button\" ng-click=\"$pagination.previous()\" ng-disabled=\"$pagination.disabled || !$pagination.hasPrevious()\" aria-label=\"Previous\">\\n' +\n    '    <md-icon md-svg-icon=\"navigate-before.svg\"></md-icon>\\n' +\n    '  </md-button>\\n' +\n    '\\n' +\n    '  <md-button class=\"md-icon-button\" type=\"button\" ng-click=\"$pagination.next()\" ng-disabled=\"$pagination.disabled || !$pagination.hasNext()\" aria-label=\"Next\">\\n' +\n    '    <md-icon md-svg-icon=\"navigate-next.svg\"></md-icon>\\n' +\n    '  </md-button>\\n' +\n    '\\n' +\n    '  <md-button class=\"md-icon-button\" type=\"button\" ng-if=\"$pagination.showBoundaryLinks()\" ng-click=\"$pagination.last()\" ng-disabled=\"$pagination.disabled || !$pagination.hasNext()\" aria-label=\"Last\">\\n' +\n    '    <md-icon md-svg-icon=\"navigate-last.svg\"></md-icon>\\n' +\n    '  </md-button>\\n' +\n    '</div>');\n}]);\n\nangular.module('md-table-progress.html', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('md-table-progress.html',\n    '<tr>\\n' +\n    '  <th colspan=\"{{columnCount()}}\">\\n' +\n    '    <md-progress-linear ng-show=\"deferred()\" md-mode=\"indeterminate\"></md-progress-linear>\\n' +\n    '  </th>\\n' +\n    '</tr>');\n}]);\n\nangular.module('arrow-up.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('arrow-up.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\"/></svg>');\n}]);\n\nangular.module('navigate-before.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('navigate-before.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/></svg>');\n}]);\n\nangular.module('navigate-first.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('navigate-first.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M7 6 v12 h2 v-12 h-2z M17.41 7.41L16 6l-6 6 6 6 1.41-1.41L12.83 12z\"/></svg>');\n}]);\n\nangular.module('navigate-last.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('navigate-last.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M15 6 v12 h2 v-12 h-2z M8 6L6.59 7.41 11.17 12l-4.58 4.59L8 18l6-6z\"/></svg>');\n}]);\n\nangular.module('navigate-next.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('navigate-next.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/></svg>');\n}]);\n\n\nangular.module('md.data.table', ['md.table.templates']);\n\nangular.module('md.data.table').directive('mdBody', mdBody);\n\nfunction mdBody() {\n\n  function compile(tElement) {\n    tElement.addClass('md-body');\n  }\n\n  return {\n    compile: compile,\n    restrict: 'A'\n  };\n}\n\nangular.module('md.data.table').directive('mdCell', mdCell);\n\nfunction mdCell() {\n  \n  function compile(tElement) {\n    var select = tElement.find('md-select');\n    \n    if(select.length) {\n      select.addClass('md-table-select').attr('md-container-class', 'md-table-select');\n    }\n    \n    tElement.addClass('md-cell');\n    \n    return postLink;\n  }\n  \n  // empty controller to be bind properties to in postLink function\n  function Controller() {\n    \n  }\n  \n  function postLink(scope, element, attrs, ctrls) {\n    var select = element.find('md-select');\n    var cellCtrl = ctrls.shift();\n    var tableCtrl = ctrls.shift();\n    \n    if(attrs.ngClick) {\n      element.addClass('md-clickable');\n    }\n    \n    if(select.length) {\n      select.on('click', function (event) {\n        event.stopPropagation();\n      });\n      \n      element.addClass('md-clickable').on('click', function (event) {\n        event.stopPropagation();\n        select[0].click();\n      });\n    }\n    \n    cellCtrl.getTable = tableCtrl.getElement;\n    \n    function getColumn() {\n      return tableCtrl.$$columns[getIndex()];\n    }\n    \n    function getIndex() {\n      return Array.prototype.indexOf.call(element.parent().children(), element[0]);\n    }\n    \n    scope.$watch(getColumn, function (column) {\n      if(!column) {\n        return;\n      }\n      \n      if(column.numeric) {\n        element.addClass('md-numeric');\n      } else {\n        element.removeClass('md-numeric');\n      }\n    });\n  }\n  \n  return {\n    controller: Controller,\n    compile: compile,\n    require: ['mdCell', '^^mdTable'],\n    restrict: 'A'\n  };\n}\n\nangular.module('md.data.table').directive('mdColumn', mdColumn);\n\nfunction mdColumn($compile, $mdUtil) {\n\n  function compile(tElement) {\n    tElement.addClass('md-column');\n    return postLink;\n  }\n\n  function postLink(scope, element, attrs, ctrls) {\n    var headCtrl = ctrls.shift();\n    var tableCtrl = ctrls.shift();\n\n    function attachSortIcon() {\n      var sortIcon = angular.element('<md-icon md-svg-icon=\"arrow-up.svg\">');\n\n      $compile(sortIcon.addClass('md-sort-icon').attr('ng-class', 'getDirection()'))(scope);\n\n      if(element.hasClass('md-numeric')) {\n        element.prepend(sortIcon);\n      } else {\n        element.append(sortIcon);\n      }\n    }\n\n    function detachSortIcon() {\n      Array.prototype.some.call(element.find('md-icon'), function (icon) {\n        return icon.classList.contains('md-sort-icon') && element[0].removeChild(icon);\n      });\n    }\n\n    function disableSorting() {\n      detachSortIcon();\n      element.removeClass('md-sort').off('click', setOrder);\n    }\n\n    function enableSorting() {\n      attachSortIcon();\n      element.addClass('md-sort').on('click', setOrder);\n    }\n\n    function getIndex() {\n      return Array.prototype.indexOf.call(element.parent().children(), element[0]);\n    }\n\n    function isActive() {\n      return scope.orderBy && (headCtrl.order === scope.orderBy || headCtrl.order === '-' + scope.orderBy);\n    }\n\n    function isNumeric() {\n      return attrs.mdNumeric === '' || scope.numeric;\n    }\n\n    function setOrder() {\n      scope.$applyAsync(function () {\n        if(isActive()) {\n          headCtrl.order = scope.getDirection() === 'md-asc' ? '-' + scope.orderBy : scope.orderBy;\n        } else {\n          headCtrl.order = scope.getDirection() === 'md-asc' ? scope.orderBy : '-' + scope.orderBy;\n        }\n\n        if(angular.isFunction(headCtrl.onReorder)) {\n          $mdUtil.nextTick(function () {\n            headCtrl.onReorder(headCtrl.order);\n          });\n        }\n      });\n    }\n\n    function updateColumn(index, column) {\n      tableCtrl.$$columns[index] = column;\n\n      if(column.numeric) {\n        element.addClass('md-numeric');\n      } else {\n        element.removeClass('md-numeric');\n      }\n    }\n\n    scope.getDirection = function () {\n      if(isActive()) {\n        return headCtrl.order.charAt(0) === '-' ? 'md-desc' : 'md-asc';\n      }\n\n      return attrs.mdDesc === '' || scope.$eval(attrs.mdDesc) ? 'md-desc' : 'md-asc';\n    };\n\n    scope.$watch(isActive, function (active) {\n      if(active) {\n        element.addClass('md-active');\n      } else {\n        element.removeClass('md-active');\n      }\n    });\n\n    scope.$watch(getIndex, function (index) {\n      updateColumn(index, {'numeric': isNumeric()});\n    });\n\n    scope.$watch(isNumeric, function (numeric) {\n      updateColumn(getIndex(), {'numeric': numeric});\n    });\n\n    scope.$watch('orderBy', function (orderBy) {\n      if(orderBy) {\n        if(!element.hasClass('md-sort')) {\n          enableSorting();\n        }\n      } else if(element.hasClass('md-sort')) {\n        disableSorting();\n      }\n    });\n  }\n\n  return {\n    compile: compile,\n    require: ['^^mdHead', '^^mdTable'],\n    restrict: 'A',\n    scope: {\n      numeric: '=?mdNumeric',\n      orderBy: '@?mdOrderBy'\n    }\n  };\n}\n\nmdColumn.$inject = ['$compile', '$mdUtil'];\n\nangular.module('md.data.table')\n  .decorator('$controller', controllerDecorator)\n  .factory('$mdEditDialog', mdEditDialog);\n\n/*\n * A decorator for ng.$controller to optionally bind properties to the\n * controller before invoking the constructor. Stolen from the ngMock.\n *\n * https://docs.angularjs.org/api/ngMock/service/$controller\n */\nfunction controllerDecorator($delegate) {\n  return function(expression, locals, later, ident) {\n    if(later && typeof later === 'object') {\n      var create = $delegate(expression, locals, true, ident);\n      angular.extend(create.instance, later);\n      return create();\n    }\n    return $delegate(expression, locals, later, ident);\n  };\n}\n\ncontrollerDecorator.$inject = ['$delegate'];\n  \nfunction mdEditDialog($compile, $controller, $document, $mdUtil, $q, $rootScope, $templateCache, $templateRequest, $window) {\n  /* jshint validthis: true */\n  \n  var ESCAPE = 27;\n  \n  var busy = false;\n  var body = angular.element($document.prop('body'));\n  \n  /*\n   * bindToController\n   * controller\n   * controllerAs\n   * locals\n   * resolve\n   * scope\n   * targetEvent\n   * template\n   * templateUrl\n   */\n  var defaultOptions = {\n    clickOutsideToClose: true,\n    disableScroll: true,\n    escToClose: true,\n    focusOnOpen: true\n  };\n  \n  function build(template, options) {\n    var scope = $rootScope.$new();\n    var element = $compile(template)(scope);\n    var backdrop = $mdUtil.createBackdrop(scope, 'md-edit-dialog-backdrop');\n    var controller;\n    \n    if(options.controller) {\n      controller = getController(options, scope, {$element: element, $scope: scope});\n    } else {\n      angular.extend(scope, options.scope);\n    }\n    \n    if(options.disableScroll) {\n      disableScroll(element);\n    }\n    \n    body.prepend(backdrop).append(element.addClass('md-whiteframe-1dp'));\n    \n    positionDialog(element, options.target);\n    \n    if(options.focusOnOpen) {\r\n      focusOnOpen(element);\r\n    }\r\n    \n    if(options.clickOutsideToClose) {\n      backdrop.on('click', function () {\n        element.remove();\n      });\n    }\n    \n    if(options.escToClose) {\n      escToClose(element);\n    }\n    \n    element.on('$destroy', function () {\n      busy = false;\n      backdrop.remove();\n    });\n    \n    return controller;\n  }\n  \n  function disableScroll(element) {\n    var restoreScroll = $mdUtil.disableScrollAround(element, body);\n    \n    element.on('$destroy', function () {\n      restoreScroll();\n    });\n  }\n  \n  function getController(options, scope, inject) {\n    if(!options.controller) {\n      return;\n    }\n    \n    if(options.resolve) {\n      angular.extend(inject, options.resolve);\n    }\n    \n    if(options.locals) {\n      angular.extend(inject, options.locals);\n    }\n    \n    if(options.controllerAs) {\n      scope[options.controllerAs] = {};\n      \n      if(options.bindToController) {\n        angular.extend(scope[options.controllerAs], options.scope);\n      } else {\n        angular.extend(scope, options.scope);\n      }\n    } else {\n      angular.extend(scope, options.scope);\n    }\n    \n    if(options.bindToController) {\n      return $controller(options.controller, inject, scope[options.controllerAs]);\n    } else {\n      return $controller(options.controller, inject);\n    }\n  }\n  \n  function getTemplate(options) {\n    return $q(function (resolve, reject) {\n      var template = options.template;\n      \n      function illegalType(type) {\n        reject('Unexpected template value. Expected a string; received a ' + type + '.');\n      }\n      \n      if(template) {\n        return angular.isString(template) ? resolve(template) : illegalType(typeof template);\n      }\n      \n      if(options.templateUrl) {\n        template = $templateCache.get(options.templateUrl);\n        \n        if(template) {\n          return resolve(template);\n        }\n        \n        var success = function (template) {\n          return resolve(template);\n        };\n        \n        var error = function () {\n          return reject('Error retrieving template from URL.');\n        };\n        \n        return $templateRequest(options.templateUrl).then(success, error);\n      }\n      \n      reject('Template not provided.');\n    });\n  }\n  \n  function logError(error) {\n    busy = false;\n    console.error(error);\n  }\n  \n  function escToClose(element) {\n    var keyup = function (event) {\n      if(event.keyCode === ESCAPE) {\n        element.remove();\n      }\n    };\n    \n    body.on('keyup', keyup);\n    \n    element.on('$destroy', function () {\n      body.off('keyup', keyup);\n    });\n  }\n\n  function focusOnOpen(element) {\r\n    $mdUtil.nextTick(function () {\r\n      var autofocus = $mdUtil.findFocusTarget(element);\n      \n      if(autofocus) {\r\n        autofocus.focus();\r\n      }\r\n    }, false);\r\n  }\n\n  function positionDialog(element, target) {\n    var table = angular.element(target).controller('mdCell').getTable();\n    \n    var getHeight = function () {\n      return element.prop('clientHeight');\n    };\n    \n    var getSize = function () {\n      return {\n        width: getWidth(),\n        height: getHeight()\n      };\n    };\n    \n    var getTableBounds = function () {\n      var parent = table.parent();\n      \n      if(parent.prop('tagName') === 'MD-TABLE-CONTAINER') {\n        return parent[0].getBoundingClientRect();\n      } else {\n        return table[0].getBoundingClientRect();\n      }\n    };\n    \n    var getWidth = function () {\n      return element.prop('clientWidth');\n    };\n    \n    var reposition = function () {\n      var size = getSize();\n      var cellBounds = target.getBoundingClientRect();\n      var tableBounds = getTableBounds();\n      \n      if(size.width > tableBounds.right - cellBounds.left) {\n        element.css('left', tableBounds.right - size.width + 'px');\n      } else {\n        element.css('left', cellBounds.left + 'px');\n      }\n      \n      if(size.height > tableBounds.bottom - cellBounds.top) {\n        element.css('top', tableBounds.bottom - size.height + 'px');\n      } else {\n        element.css('top', cellBounds.top + 1 + 'px');\n      }\n      \n      element.css('minWidth', cellBounds.width + 'px');\n    };\n    \n    var watchWidth = $rootScope.$watch(getWidth, reposition);\n    var watchHeight = $rootScope.$watch(getHeight, reposition);\n    \n    $window.addEventListener('resize', reposition);\n    \n    element.on('$destroy', function () {\n      watchWidth();\n      watchHeight();\n      \n      $window.removeEventListener('resize', reposition);\n    });\n  }\n  \n  function preset(size, options) {\n    \n    function getAttrs() {\n      var attrs = 'type=\"' + (options.type || 'text') + '\"';\n      \n      for(var attr in options.validators) {\n        attrs += ' ' + attr + '=\"' + options.validators[attr] + '\"';\n      }\n      \n      return attrs;\n    }\n    \n    return {\n      controller: ['$element', '$q', 'save', '$scope', function ($element, $q, save, $scope) {\n        function update() {\n          if($scope.editDialog.$invalid) {\n            return $q.reject();\n          }\n          \n          if(angular.isFunction(save)) {\n            return $q.when(save($scope.editDialog.input));\n          }\n          \n          return $q.resolve();\n        }\n        \n        this.dismiss = function () {\n          $element.remove();\n        };\n        \n        this.getInput = function () {\n          return $scope.editDialog.input;\n        };\n        \n        $scope.dismiss = this.dismiss;\n        \n        $scope.submit = function () {\n          update().then(function () {\n            $scope.dismiss();\n          });\n        };\n      }],\n      locals: {\n        save: options.save\n      },\n      scope: {\n        cancel: options.cancel || 'Cancel',\n        messages: options.messages,\n        model: options.modelValue,\n        ok: options.ok || 'Save',\n        placeholder: options.placeholder,\n        title: options.title,\n        size: size\n      },\n      template:\n        '<md-edit-dialog>' +\n          '<div layout=\"column\" class=\"md-content\">' +\n            '<div ng-if=\"size === \\'large\\'\" class=\"md-title\">{{title || \\'Edit\\'}}</div>' +\n            '<form name=\"editDialog\" layout=\"column\" ng-submit=\"submit(model)\">' +\n              '<md-input-container md-no-float>' +\n                '<input name=\"input\" ng-model=\"model\" md-autofocus placeholder=\"{{placeholder}} \"' + getAttrs() + '>' +\n                '<div ng-messages=\"editDialog.input.$error\">' +\n                  '<div ng-repeat=\"(key, message) in messages\" ng-message=\"{{key}}\">{{message}}</div>' +\n                '</div>' +\n              '</md-input-container>' +\n            '</form>' +\n          '</div>' +\n          '<div ng-if=\"size === \\'large\\'\" layout=\"row\" layout-align=\"end\" class=\"md-actions\">' +\n            '<md-button class=\"md-primary\" ng-click=\"dismiss()\">{{cancel}}</md-button>' +\n            '<md-button class=\"md-primary\" ng-click=\"submit()\">{{ok}}</md-button>' +\n          '</div>' +\n        '</md-edit-dialog>'\n    };\n  }\n  \n  this.show = function (options) {\n    if(busy) {\n      return $q.reject();\n    }\n    \n    busy = true;\n    options = angular.extend({}, defaultOptions, options);\n    \n    if(!options.targetEvent) {\n      return logError('options.targetEvent is required to align the dialog with the table cell.');\n    }\n    \n    if(!options.targetEvent.currentTarget.classList.contains('md-cell')) {\n      return logError('The event target must be a table cell.');\n    }\n    \n    if(options.bindToController && !options.controllerAs) {\n      return logError('You must define options.controllerAs when options.bindToController is true.');\n    }\n    \n    options.target = options.targetEvent.currentTarget;\n    \n    var promise = getTemplate(options);\n    var promises = [promise];\n    \n    for(var prop in options.resolve) {\n      promise = options.resolve[prop];\n      promises.push($q.when(angular.isFunction(promise) ? promise() : promise));\n    }\n    \n    promise = $q.all(promises);\n    \n    promise['catch'](logError);\n    \n    return promise.then(function (results) {\n      var template = results.shift();\n      \n      for(var prop in options.resolve) {\n        options.resolve[prop] = results.shift();\n      }\n      \n      return build(template, options);\n    });\n  };\n  \n  this.small = function (options) {\n    return this.show(angular.extend({}, options, preset('small', options)));\n  }.bind(this);\n  \n  this.large = function (options) {\n    return this.show(angular.extend({}, options, preset('large', options)));\n  }.bind(this);\n  \n  return this;\n}\n\nmdEditDialog.$inject = ['$compile', '$controller', '$document', '$mdUtil', '$q', '$rootScope', '$templateCache', '$templateRequest', '$window'];\n\n\nangular.module('md.data.table').directive('mdFoot', mdFoot);\n\nfunction mdFoot() {\n\n  function compile(tElement) {\n    tElement.addClass('md-foot');\n  }\n\n  return {\n    compile: compile,\n    restrict: 'A'\n  };\n}\n\nangular.module('md.data.table').directive('mdHead', mdHead);\n\nfunction mdHead($compile) {\n\n  function compile(tElement) {\n    tElement.addClass('md-head');\n    return postLink;\n  }\n  \n  // empty controller to be bind scope properties to\n  function Controller() {\n    \n  }\n  \n  function postLink(scope, element, attrs, tableCtrl) {\n    // because scope.$watch is unpredictable\n    var oldValue = new Array(2);\n    \n    function addCheckboxColumn() {\n      element.children().prepend('<th class=\"md-column md-checkbox-column\">');\n    }\n    \n    function attatchCheckbox() {\n      element.prop('lastElementChild').firstElementChild.appendChild($compile(createCheckBox())(scope)[0]);\n    }\n    \n    function createCheckBox() {\n      return angular.element('<md-checkbox>').attr({\n        'aria-label': 'Select All',\n        'ng-click': 'toggleAll()',\n        'ng-checked': 'allSelected()',\n        'ng-disabled': '!getSelectableRows().length'\n      });\n    }\n    \n    function detachCheckbox() {\n      var cell = element.prop('lastElementChild').firstElementChild;\n      \n      if(cell.classList.contains('md-checkbox-column')) {\n        angular.element(cell).empty();\n      }\n    }\n    \n    function enableRowSelection() {\n      return tableCtrl.$$rowSelect;\n    }\n    \n    function mdSelectCtrl(row) {\n      return angular.element(row).controller('mdSelect');\n    }\n    \n    function removeCheckboxColumn() {\n      Array.prototype.some.call(element.find('th'), function (cell) {\n        return cell.classList.contains('md-checkbox-column') && cell.remove();\n      });\n    }\n    \n    scope.allSelected = function () {\n      var rows = scope.getSelectableRows();\n      \n      return rows.length && rows.every(function (row) {\n        return row.isSelected();\n      });\n    };\n    \n    scope.getSelectableRows = function () {\n      return tableCtrl.getBodyRows().map(mdSelectCtrl).filter(function (ctrl) {\n        return ctrl && !ctrl.disabled;\n      });\n    };\n    \n    scope.selectAll = function () {\n        tableCtrl.getBodyRows().map(mdSelectCtrl).forEach(function (ctrl) {\n        if(ctrl && !ctrl.isSelected()) {\n          ctrl.select();\n        }\n      });\n    };\n    \n    scope.toggleAll = function () {\n      return scope.allSelected() ? scope.unSelectAll() : scope.selectAll();\n    };\n    \n    scope.unSelectAll = function () {\n      tableCtrl.getBodyRows().map(mdSelectCtrl).forEach(function (ctrl) {\n        if(ctrl && ctrl.isSelected()) {\n          ctrl.deselect();\n        }\n      });\n    };\n    \n    scope.$watchGroup([enableRowSelection, tableCtrl.enableMultiSelect], function (newValue) {\n      if(newValue[0] !== oldValue[0]) {\n        if(newValue[0]) {\n          addCheckboxColumn();\n          \n          if(newValue[1]) {\n            attatchCheckbox();\n          }\n        } else {\n          removeCheckboxColumn();\n        }\n      } else if(newValue[0] && newValue[1] !== oldValue[1]) {\n        if(newValue[1]) {\n          attatchCheckbox();\n        } else {\n          detachCheckbox();\n        }\n      }\n      \n      angular.copy(newValue, oldValue);\n    });\n  }\n  \n  return {\n    bindToController: true,\n    compile: compile,\n    controller: Controller,\n    controllerAs: '$mdHead',\n    require: '^^mdTable',\n    restrict: 'A',\n    scope: {\n      order: '=?mdOrder',\n      onReorder: '=?mdOnReorder'\n    }\n  };\n}\n\nmdHead.$inject = ['$compile'];\n\nangular.module('md.data.table').directive('mdRow', mdRow);\n\nfunction mdRow() {\n\n  function compile(tElement) {\n    tElement.addClass('md-row');\n    return postLink;\n  }\n  \n  function postLink(scope, element, attrs, tableCtrl) {\n    function enableRowSelection() {\n      return tableCtrl.$$rowSelect;\n    }\n    \n    function isBodyRow() {\n      return tableCtrl.getBodyRows().indexOf(element[0]) !== -1;\n    }\n    \n    function isChild(node) {\n      return element[0].contains(node[0]);\n    }\n    \n    if(isBodyRow()) {\n      var cell = angular.element('<td class=\"md-cell\">');\n      \n      scope.$watch(enableRowSelection, function (enable) {\n        // if a row is not selectable, prepend an empty cell to it\n        if(enable && !attrs.mdSelect) {\n          if(!isChild(cell)) {\n            element.prepend(cell);\n          }\n          return;\n        }\n        \n        if(isChild(cell)) {\n          cell.remove();\n        }\n      });\n    }\n  }\n\n  return {\n    compile: compile,\n    require: '^^mdTable',\n    restrict: 'A'\n  };\n}\n\nangular.module('md.data.table').directive('mdSelect', mdSelect);\n\nfunction mdSelect($compile, $parse) {\n\n  // empty controller to bind scope properties to\n  function Controller() {\n\n  }\n\n  function postLink(scope, element, attrs, ctrls) {\n    var self = ctrls.shift();\n    var tableCtrl = ctrls.shift();\n    var getId = $parse(attrs.mdSelectId);\n\n    self.id = getId(self.model);\n\n    if(tableCtrl.$$rowSelect && self.id) {\n      if(tableCtrl.$$hash.has(self.id)) {\n        var index = tableCtrl.selected.indexOf(tableCtrl.$$hash.get(self.id));\n\n        // if the item is no longer selected remove it\n        if(index === -1) {\n          tableCtrl.$$hash.purge(self.id);\n        }\n\n        // if the item is not a reference to the current model update the reference\n        else if(!tableCtrl.$$hash.equals(self.id, self.model)) {\n          tableCtrl.$$hash.update(self.id, self.model);\n          tableCtrl.selected.splice(index, 1, self.model);\n        }\n\n      } else {\n\n        // check if the item has been selected\n        tableCtrl.selected.some(function (item, index) {\n          if(getId(item) === self.id) {\n            tableCtrl.$$hash.update(self.id, self.model);\n            tableCtrl.selected.splice(index, 1, self.model);\n\n            return true;\n          }\n        });\n      }\n    }\n\n    self.isSelected = function () {\n      if(!tableCtrl.$$rowSelect) {\n        return false;\n      }\n\n      if(self.id) {\n        return tableCtrl.$$hash.has(self.id);\n      }\n\n      return tableCtrl.selected.indexOf(self.model) !== -1;\n    };\n\n    self.select = function () {\n      if(self.disabled) {\n        return;\n      }\n\n      if(tableCtrl.enableMultiSelect()) {\n        tableCtrl.selected.push(self.model);\n      } else {\n        tableCtrl.selected.splice(0, tableCtrl.selected.length, self.model);\n      }\n\n      if(angular.isFunction(self.onSelect)) {\n        self.onSelect(self.model);\n      }\n    };\n\n    self.deselect = function () {\n      if(self.disabled) {\n        return;\n      }\n\n      tableCtrl.selected.splice(tableCtrl.selected.indexOf(self.model), 1);\n\n      if(angular.isFunction(self.onDeselect)) {\n        self.onDeselect(self.model);\n      }\n    };\n\n    self.toggle = function (event) {\n      if(event && event.stopPropagation) {\n        event.stopPropagation();\n      }\n\n      return self.isSelected() ? self.deselect() : self.select();\n    };\n\n    function autoSelect() {\n      return attrs.mdAutoSelect === '' || self.autoSelect;\n    }\n\n    function createCheckbox() {\n      var checkbox = angular.element('<md-checkbox>').attr({\n        'aria-label': 'Select Row',\n        'ng-click': '$mdSelect.toggle($event)',\n        'ng-checked': '$mdSelect.isSelected()',\n        'ng-disabled': '$mdSelect.disabled'\n      });\n\n      return angular.element('<td class=\"md-cell md-checkbox-cell\">').append($compile(checkbox)(scope));\n    }\n\n    function disableSelection() {\n      Array.prototype.some.call(element.children(), function (child) {\n        return child.classList.contains('md-checkbox-cell') && element[0].removeChild(child);\n      });\n\n      if(autoSelect()) {\n        element.off('click', toggle);\n      }\n    }\n\n    function enableSelection() {\n      element.prepend(createCheckbox());\n\n      if(autoSelect()) {\n        element.on('click', toggle);\n      }\n    }\n\n    function enableRowSelection() {\n      return tableCtrl.$$rowSelect;\n    }\n\n    function onSelectChange(selected) {\n      if(!self.id) {\n        return;\n      }\n\n      if(tableCtrl.$$hash.has(self.id)) {\n        // check if the item has been deselected\n        if(selected.indexOf(tableCtrl.$$hash.get(self.id)) === -1) {\n          tableCtrl.$$hash.purge(self.id);\n        }\n\n        return;\n      }\n\n      // check if the item has been selected\n      if(selected.indexOf(self.model) !== -1) {\n        tableCtrl.$$hash.update(self.id, self.model);\n      }\n    }\n\n    function toggle(event) {\n      scope.$applyAsync(function () {\n        self.toggle(event);\n      });\n    }\n\n    scope.$watch(enableRowSelection, function (enable) {\n      if(enable) {\n        enableSelection();\n      } else {\n        disableSelection();\n      }\n    });\n\n    scope.$watch(autoSelect, function (newValue, oldValue) {\n      if(newValue === oldValue) {\n        return;\n      }\n\n      if(tableCtrl.$$rowSelect && newValue) {\n        element.on('click', toggle);\n      } else {\n        element.off('click', toggle);\n      }\n    });\n\n    scope.$watch(self.isSelected, function (isSelected) {\n      return isSelected ? element.addClass('md-selected') : element.removeClass('md-selected');\n    });\n\n    scope.$watch(tableCtrl.enableMultiSelect, function (multiple) {\n      if(tableCtrl.$$rowSelect && !multiple) {\n        // remove all but the first selected item\n        tableCtrl.selected.splice(1);\n      }\n    });\n\n    tableCtrl.registerModelChangeListener(onSelectChange);\n\n    element.on('$destroy', function () {\n      tableCtrl.removeModelChangeListener(onSelectChange);\n    });\n  }\n\n  return {\n    bindToController: true,\n    controller: Controller,\n    controllerAs: '$mdSelect',\n    link: postLink,\n    require: ['mdSelect', '^^mdTable'],\n    restrict: 'A',\n    scope: {\n      model: '=mdSelect',\n      disabled: '=ngDisabled',\n      onSelect: '=?mdOnSelect',\n      onDeselect: '=?mdOnDeselect',\n      autoSelect: '=mdAutoSelect'\n    }\n  };\n}\n\nmdSelect.$inject = ['$compile', '$parse'];\n\nangular.module('md.data.table').directive('mdTable', mdTable);\n\nfunction Hash() {\n  var keys = {};\n  \n  this.equals = function (key, item) {\n    return keys[key] === item;\n  };\n\n  this.get = function (key) {\n    return keys[key];\n  };\n  \n  this.has = function (key) {\n    return keys.hasOwnProperty(key);\n  };\n\n  this.purge = function (key) {\n    delete keys[key];\n  };\n  \n  this.update = function (key, item) {\n    keys[key] = item;\n  };\n}\n\nfunction mdTable() {\n  \n  function compile(tElement, tAttrs) {\n    tElement.addClass('md-table');\n    \n    if(tAttrs.hasOwnProperty('mdProgress')) {\n      var body = tElement.find('tbody')[0];\n      var progress = angular.element('<thead class=\"md-table-progress\">');\n      \n      if(body) {\n        tElement[0].insertBefore(progress[0], body);\n      }\n    }\n  }\n  \n  function Controller($attrs, $element, $q, $scope) {\n    var self = this;\n    var queue = [];\n    var watchListener;\n    var modelChangeListeners = [];\n    \n    self.$$hash = new Hash();\n    self.$$columns = {};\n    \n    function enableRowSelection() {\n      self.$$rowSelect = true;\n      \n      watchListener = $scope.$watchCollection('$mdTable.selected', function (selected) {\n        modelChangeListeners.forEach(function (listener) {\n          listener(selected);\n        });\n      });\n      \n      $element.addClass('md-row-select');\n    }\n    \n    function disableRowSelection() {\n      self.$$rowSelect = false;\n      \n      if(angular.isFunction(watchListener)) {\n        watchListener();\n      }\n      \n      $element.removeClass('md-row-select');\n    }\n    \n    function resolvePromises() {\n      if(!queue.length) {\n        return $scope.$applyAsync();\n      }\n      \n      queue[0]['finally'](function () {\n        queue.shift();\n        resolvePromises();\n      });\n    }\n    \n    function rowSelect() {\n      return $attrs.mdRowSelect === '' || self.rowSelect;\n    }\n    \n    function validateModel() {\n      if(!self.selected) {\n        return console.error('Row selection: ngModel is not defined.');\n      }\n      \n      if(!angular.isArray(self.selected)) {\n        return console.error('Row selection: Expected an array. Recived ' + typeof self.selected + '.');\n      }\n      \n      return true;\n    }\n    \n    self.columnCount = function () {\n      return self.getRows($element[0]).reduce(function (count, row) {\n        return row.cells.length > count ? row.cells.length : count;\n      }, 0);\n    };\n    \n    self.getRows = function (element) {\n      return Array.prototype.filter.call(element.rows, function (row) {\n        return !row.classList.contains('ng-leave');\n      });\n    };\n    \n    self.getBodyRows = function () {\n      return Array.prototype.reduce.call($element.prop('tBodies'), function (result, tbody) {\n        return result.concat(self.getRows(tbody));\n      }, []);\n    };\n    \n    self.getElement = function () {\n      return $element;\n    };\n    \n    self.getHeaderRows = function () {\n      return self.getRows($element.prop('tHead'));\n    };\n    \n    self.enableMultiSelect = function () {\n      return $attrs.multiple === '' || $scope.$eval($attrs.multiple);\n    };\n    \n    self.waitingOnPromise = function () {\n      return !!queue.length;\n    };\n    \n    self.queuePromise = function (promise) {\n      if(!promise) {\n        return;\n      }\n      \n      if(queue.push(angular.isArray(promise) ? $q.all(promise) : $q.when(promise)) === 1) {\n        resolvePromises();\n      }\n    };\n    \n    self.registerModelChangeListener = function (listener) {\n      modelChangeListeners.push(listener);\n    };\n    \n    self.removeModelChangeListener = function (listener) {\n      var index = modelChangeListeners.indexOf(listener);\n      \n      if(index !== -1) {\n        modelChangeListeners.splice(index, 1);\n      }\n    };\n    \n    if($attrs.hasOwnProperty('mdProgress')) {\n      $scope.$watch('$mdTable.progress', self.queuePromise);\n    }\n    \n    $scope.$watch(rowSelect, function (enable) {\n      if(enable && !!validateModel()) {\n        enableRowSelection();\n      } else {\n        disableRowSelection();\n      }\n    });\n  }\n  \n  Controller.$inject = ['$attrs', '$element', '$q', '$scope'];\n  \n  return {\n    bindToController: true,\n    compile: compile,\n    controller: Controller,\n    controllerAs: '$mdTable',\n    restrict: 'A',\n    scope: {\n      progress: '=?mdProgress',\n      selected: '=ngModel',\n      rowSelect: '=mdRowSelect'\n    }\n  };\n}\n\nangular.module('md.data.table').directive('mdTablePagination', mdTablePagination);\n\nfunction mdTablePagination() {\n\n  function compile(tElement) {\n    tElement.addClass('md-table-pagination');\n  }\n\n  function Controller($attrs, $mdUtil, $scope) {\n    var self = this;\n    var defaultLabel = {\n      page: 'Page:',\n      rowsPerPage: 'Rows per page:',\n      of: 'of'\n    };\n\n    self.label = angular.copy(defaultLabel);\n\n    function isPositive(number) {\n      return parseInt(number, 10) > 0;\n    }\n\n    self.eval = function (expression) {\n      return $scope.$eval(expression);\n    };\n\n    self.first = function () {\n      self.page = 1;\n      self.onPaginationChange();\n    };\n\n    self.hasNext = function () {\n      return self.page * self.limit < self.total;\n    };\n\n    self.hasPrevious = function () {\n      return self.page > 1;\n    };\n\n    self.last = function () {\n      self.page = self.pages();\n      self.onPaginationChange();\n    };\n\n    self.max = function () {\n      return self.hasNext() ? self.page * self.limit : self.total;\n    };\n\n    self.min = function () {\n      return isPositive(self.total) ? self.page * self.limit - self.limit + 1 : 0;\n    };\n\n    self.next = function () {\n      self.page++;\n      self.onPaginationChange();\n    };\n\n    self.onPaginationChange = function () {\n      if(angular.isFunction(self.onPaginate)) {\n        $mdUtil.nextTick(function () {\n          self.onPaginate(self.page, self.limit);\n        });\n      }\n    };\n\n    self.pages = function () {\n      return isPositive(self.total) ? Math.ceil(self.total / (isPositive(self.limit) ? self.limit : 1)) : 1;\n    };\n\n    self.previous = function () {\n      self.page--;\n      self.onPaginationChange();\n    };\n\n    self.showBoundaryLinks = function () {\n      return $attrs.mdBoundaryLinks === '' || self.boundaryLinks;\n    };\n\n    self.showPageSelect = function () {\n      return $attrs.mdPageSelect === '' || self.pageSelect;\n    };\n\n    $scope.$watch('$pagination.limit', function (newValue, oldValue) {\n      if(isNaN(newValue) || isNaN(oldValue) || newValue === oldValue) {\n        return;\n      }\n\n      // find closest page from previous min\n      self.page = Math.floor(((self.page * oldValue - oldValue) + newValue) / (isPositive(newValue) ? newValue : 1));\n      self.onPaginationChange();\n    });\n\n    $attrs.$observe('mdLabel', function (label) {\n      angular.extend(self.label, defaultLabel, $scope.$eval(label));\n    });\n\n    $scope.$watch('$pagination.total', function (newValue, oldValue) {\n      if(isNaN(newValue) || newValue === oldValue) {\n        return;\n      }\n\n      if(self.page > self.pages()) {\n        self.last();\n      }\n    });\n  }\n\n  Controller.$inject = ['$attrs', '$mdUtil', '$scope'];\n\n  return {\n    bindToController: {\n      boundaryLinks: '=?mdBoundaryLinks',\n      disabled: '=ngDisabled',\n      limit: '=mdLimit',\n      page: '=mdPage',\n      pageSelect: '=?mdPageSelect',\n      onPaginate: '=?mdOnPaginate',\n      limitOptions: '=?mdLimitOptions',\n      total: '@mdTotal'\n    },\n    compile: compile,\n    controller: Controller,\n    controllerAs: '$pagination',\n    restrict: 'E',\n    scope: {},\n    templateUrl: 'md-table-pagination.html'\n  };\n}\n\nangular.module('md.data.table').directive('mdTableProgress', mdTableProgress);\n\nfunction mdTableProgress() {\n\n  function postLink(scope, element, attrs, tableCtrl) {\n    scope.columnCount = tableCtrl.columnCount;\n    scope.deferred = tableCtrl.waitingOnPromise;\n  }\n\n  return {\n    link: postLink,\n    require: '^^mdTable',\n    restrict: 'C',\n    scope: {},\n    templateUrl: 'md-table-progress.html'\n  };\n}\n\nangular.module('md.data.table').directive('virtualPageSelect', virtualPageSelect);\n\nfunction virtualPageSelect() {\n\n  function Controller($element, $scope) {\n    var self = this;\n    var content = $element.find('md-content');\n\n    self.pages = [];\n\n    function getMin(pages, total) {\n      return Math.min(pages, isFinite(total) && isPositive(total) ? total : 1);\n    }\n\n    function isPositive(number) {\n      return number > 0;\n    }\n\n    function setPages(max) {\n      if(self.pages.length > max) {\n        return self.pages.splice(max);\n      }\n\n      for(var i = self.pages.length; i < max; i++) {\n        self.pages.push(i + 1);\n      }\n    }\n\n    content.on('scroll', function () {\n      if((content.prop('clientHeight') + content.prop('scrollTop')) >= content.prop('scrollHeight')) {\n        $scope.$applyAsync(function () {\n          setPages(getMin(self.pages.length + 10, self.total));\n        });\n      }\n    });\n\n    $scope.$watch('$pageSelect.total', function (total) {\n      setPages(getMin(Math.max(self.pages.length, 10), total));\n    });\n\n    $scope.$watch('$pagination.page', function (page) {\n      for(var i = self.pages.length; i < page; i++) {\n        self.pages.push(i + 1);\n      }\n    });\n  }\n\n  Controller.$inject = ['$element', '$scope'];\n\n  return {\n    bindToController: {\n      total: '@'\n    },\n    controller: Controller,\n    controllerAs: '$pageSelect'\n  };\n}\n\n})(window, angular);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../assets/plugins/md-data-table/js/md-data-table.js\n// module id = 9\n// module chunks = 0","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 10;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./directives \\.js$\n// module id = 10\n// module chunks = 0","var map = {\n\t\"./pessoaService.js\": 12,\n\t\"./tarefaService.js\": 13\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 11;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./services \\.js$\n// module id = 11\n// module chunks = 0","﻿(function () {\r\n    angular.module('orpak').factory('pessoaService', ['$http', 'ngAuthSettings', '$q', function (\r\n        $http,\r\n        ngAuthSettings\r\n    ) {\r\n        var serviceBase = ngAuthSettings.apiServiceBaseUri + 'Pessoa/';\r\n\r\n        return {\r\n            listar: listar,\r\n            inserir: inserir,\r\n            obter: obter,\r\n            alterar: alterar,\r\n        };\r\n\r\n        function listar(paginaAtual, totalPorPagina) {\r\n            return $http({\r\n                method: 'GET',\r\n                url: serviceBase,\r\n                params: {\r\n                    paginaAtual: paginaAtual,\r\n                    totalPagina: totalPorPagina\r\n                }\r\n            });\r\n        }\r\n\r\n        function inserir(pessoa) {\r\n            return $http.post(serviceBase, pessoa);\r\n        }\r\n\r\n        function alterar(id, insumo) {\r\n            return $http.put(serviceBase + id, pessoa);\r\n        }\r\n\r\n        function obter(id) {\r\n            return $http.get(serviceBase + id);\r\n        }\r\n    }]);\r\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./services/pessoaService.js\n// module id = 12\n// module chunks = 0","﻿(function () {\r\n    angular.module('orpak').factory('tarefaService', ['$http', 'ngAuthSettings', '$q', function (\r\n        $http,\r\n        ngAuthSettings\r\n    ) {\r\n        var serviceBase = ngAuthSettings.apiServiceBaseUri + 'Tarefa/';\r\n\r\n        return {\r\n            listar: listar,\r\n            inserir: inserir,\r\n            obter: obter,\r\n            alterar: alterar,\r\n            alterarStatus : alterarStatus,\r\n            excluir: excluir,\r\n        };\r\n\r\n        function listar(paginaAtual, totalPorPagina) {\r\n            return $http({\r\n                method: 'GET',\r\n                url: serviceBase,\r\n                params: {\r\n                    paginaAtual: paginaAtual,\r\n                    totalPagina: totalPorPagina\r\n                }\r\n            });\r\n        }\r\n\r\n        function inserir(tarefa) {\r\n            return $http.post(serviceBase, tarefa);\r\n        }\r\n\r\n        function alterar(id, tarefa) {\r\n            return $http.put(serviceBase + id, tarefa);\r\n        }\r\n\r\n        function alterarStatus(id, idStatus) {\r\n            return $http.put(serviceBase + id + '/Status/' + idStatus);\r\n        }\r\n\r\n        function obter(id) {\r\n            return $http.get(serviceBase + id);\r\n        }\r\n\r\n        function excluir(id) {\r\n            return $http.delete(serviceBase + id);\r\n        }\r\n    }]);\r\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./services/tarefaService.js\n// module id = 13\n// module chunks = 0","var map = {\n\t\"./views/home.js\": 15\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 14;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./comum \\.js$\n// module id = 14\n// module chunks = 0","﻿(function () {\r\n    angular.module('orpak').controller('comum.views.home', ['$scope',\r\n    function ($scope) {\r\n        var vm = this;\r\n\r\n    }]);\r\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./comum/views/home.js\n// module id = 15\n// module chunks = 0","var map = {\n\t\"./Pessoa/views/index.js\": 17,\n\t\"./Pessoa/views/modal.js\": 18,\n\t\"./Tarefa/views/index.js\": 19,\n\t\"./Tarefa/views/modal.js\": 20\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./cadastros \\.js$\n// module id = 16\n// module chunks = 0","﻿(function () {\r\n    angular.module('orpak').controller('cadastros.views.pessoa',\r\n        function ($scope, $mdSidenav, $mdDialog, $mdMedia, $rootScope, pessoaService) {\r\n            var vm = this;\r\n\r\n            vm.pessoas = [];\r\n\r\n            $rootScope.$on(\"CallParentMethod\", function () {\r\n                vm.carregarGrid();\r\n            });\r\n\r\n           \r\n            vm.abrirModal = function (ev, id) {\r\n                var useFullScreen = ($mdMedia('sm') || $mdMedia('xs')) && $scope.customFullscreen;\r\n                $mdDialog.show({\r\n                    templateUrl: 'cadastro.html',\r\n                    controller: 'cadastros.views.modalPessoa as vm',\r\n                    parent: angular.element(document.body),\r\n                    targetEvent: ev,\r\n                    fullscreen: useFullScreen,\r\n                    locals: {\r\n                        pessoaId: id\r\n                    }\r\n                }).then(function () {\r\n                    vm.carregarGrid();\r\n                });\r\n            };\r\n\r\n            vm.options = {\r\n                rowSelection: true,\r\n                multiSelect: true,\r\n                autoSelect: true,\r\n                decapitate: false,  \r\n                largeEditDialog: false,\r\n                boundaryLinks: false,\r\n                limitSelect: true,\r\n                pageSelect: true\r\n            };\r\n\r\n            vm.query = { order: 'Nome', limit: 10, page: 1 };\r\n\r\n            vm.carregarGrid = function () {\r\n\r\n                var pageNumber = ((vm.query.page - 1) * vm.query.limit);\r\n                var pageSize = vm.query.limit;\r\n\r\n                $scope.$parent.vm.loading =  pessoaService.listar(pageNumber, pageSize).success(function (result) {\r\n                    vm.qtdRegistros = result.Total;\r\n                    vm.depoimentos = result.Resultados;\r\n                }).error(function (result) {\r\n                    var alert = $mdDialog.alert({ title: 'Erro', textContent: response.data.Message, ok: 'Fechar' });\r\n\r\n                    $mdDialog.show(alert).finally(function () {\r\n                        alert = undefined;\r\n                    });\r\n                })\r\n            };\r\n\r\n            vm.paginacaoGrid = function (page, limit) {\r\n                vm.query.page = page;\r\n                vm.query.limit = limit;\r\n\r\n                vm.carregarGrid();\r\n            }\r\n\r\n            //vm.carregarGrid();\r\n        }\r\n    );\r\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./cadastros/Pessoa/views/index.js\n// module id = 17\n// module chunks = 0","﻿(function () {\r\n    angular.module('orpak').controller('cadastros.views.modalPessoa',\r\n        function ($scope, $mdSidenav, $mdDialog, $mdMedia, pessoaService, pessoaId) {\r\n            var vm = this;\r\n\r\n            vm.pessoa = [];\r\n            vm.nome = \"\";\r\n\r\n            vm.fecharModal = function () {\r\n                vm.nome = \"\";\r\n                $mdDialog.cancel();\r\n            };\r\n\r\n            vm.carregarInformacao = function () {\r\n\r\n                if (pessoaId != 0) {\r\n\r\n                    $scope.$parent.vm.loading = pessoaService.obter(pessoaId).success(function (result) {\r\n                        vm.nome = response.Nome;\r\n                    }).error(function (result) {\r\n                        var alert = $mdDialog.alert({ title: 'Erro', textContent: response.Message, ok: 'Fechar' });\r\n\r\n                        $mdDialog.show(alert).finally(function () {\r\n                            alert = undefined;\r\n                        });\r\n                    })\r\n                }\r\n            };\r\n\r\n            //vm.carregarInformacao();\r\n        }\r\n    );\r\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./cadastros/Pessoa/views/modal.js\n// module id = 18\n// module chunks = 0","﻿(function () {\r\n    angular.module('orpak').controller('cadastros.views.tarefa',\r\n        function ($scope, $mdSidenav, $mdDialog, $mdMedia, $rootScope, tarefaService) {\r\n            var vm = this;\r\n\r\n            vm.tarefas = [];\r\n\r\n            $rootScope.$on(\"CallParentMethod\", function () {\r\n                vm.carregarGrid();\r\n            });\r\n\r\n            vm.deletar = function (ev, id) {\r\n\r\n                var confirm = $mdDialog.confirm()\r\n                              .title('Confirmação')\r\n                              .textContent('Deseja excluir o registro?')\r\n                              .ariaLabel('Lucky day')\r\n                              .targetEvent(ev)\r\n                              .ok('Ok')\r\n                              .cancel('Cancelar');\r\n\r\n                $mdDialog.show(confirm).then(function () {\r\n                    $scope.$parent.vm.loading = tarefaService.excluir(id).success(function (result) {\r\n                        vm.carregarGrid();\r\n                    }).error(function (result) {\r\n                        var alert = $mdDialog.alert({ title: 'Erro', textContent: response.data.Message, ok: 'Fechar' });\r\n\r\n                        $mdDialog.show(alert).finally(function () {\r\n                            alert = undefined;\r\n                        });\r\n                    })\r\n                });\r\n              \r\n            }\r\n            \r\n\r\n            vm.abrirModal = function (ev, id) {\r\n                var useFullScreen = ($mdMedia('sm') || $mdMedia('xs')) && $scope.customFullscreen;\r\n                $mdDialog.show({\r\n                    templateUrl: 'cadastro.html',\r\n                    controller: 'cadastros.views.modalTarefa as vm',\r\n                    parent: angular.element(document.body),\r\n                    targetEvent: ev,\r\n                    fullscreen: useFullScreen,\r\n                    locals: {\r\n                        tarefaId: id\r\n                    }\r\n                }).then(function () {\r\n                    vm.carregarGrid();\r\n                });\r\n            };\r\n\r\n            vm.options = {\r\n                rowSelection: true,\r\n                multiSelect: true,\r\n                autoSelect: true,\r\n                decapitate: false,\r\n                largeEditDialog: false,\r\n                boundaryLinks: false,\r\n                limitSelect: true,\r\n                pageSelect: true\r\n            };\r\n\r\n            vm.query = { order: 'Id', limit: 10, page: 1 };\r\n\r\n            vm.carregarGrid = function () {\r\n\r\n                //var pageNumber = ((vm.query.page - 1) * vm.query.limit);\r\n                var pageNumber = vm.query.page;\r\n                var pageSize = vm.query.limit;\r\n\r\n                $scope.$parent.vm.loading = tarefaService.listar(pageNumber, pageSize).success(function (result) {\r\n                    vm.qtdRegistros = result.Total;\r\n                    vm.tarefas = result.Result;\r\n                }).error(function (result) {\r\n                    var alert = $mdDialog.alert({ title: 'Erro', textContent: response.data.Message, ok: 'Fechar' });\r\n\r\n                    $mdDialog.show(alert).finally(function () {\r\n                        alert = undefined;\r\n                    });\r\n                })\r\n            };\r\n\r\n            vm.paginacaoGrid = function (page, limit) {\r\n                vm.query.page = page;\r\n                vm.query.limit = limit;\r\n\r\n                vm.carregarGrid();\r\n            }\r\n\r\n            vm.carregarGrid();\r\n        }\r\n    );\r\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./cadastros/Tarefa/views/index.js\n// module id = 19\n// module chunks = 0","﻿(function () {\r\n    angular.module('orpak').controller('cadastros.views.modalTarefa',\r\n        function ($scope, $rootScope, $mdSidenav, $mdDialog, $mdMedia, tarefaService, tarefaId) {\r\n            var vm = this;\r\n\r\n            vm.tarefa = [];\r\n            vm.nomePessoa = \"\";\r\n            vm.status = \"\";\r\n            vm.descricao = \"\";\r\n\r\n            vm.fecharModal = function () {\r\n                vm.nomePessoa = \"\";\r\n                vm.status = \"\";\r\n                vm.descricao = \"\";\r\n                $mdDialog.cancel();\r\n            };\r\n\r\n            vm.alterar = function () {\r\n                tarefaService.alterarStatus(tarefaId, vm.status).success(function (result) {\r\n                    var alert = $mdDialog.alert({ title: 'Sucesso', textContent: 'Status alterado com sucesso', ok: 'Fechar' });\r\n\r\n                    $mdDialog.show(alert).finally(function () {\r\n                        alert = undefined;\r\n                    });\r\n\r\n                    $rootScope.$emit(\"CallParentMethod\", {});\r\n                }).error(function (result) {\r\n                    var alert = $mdDialog.alert({ title: 'Erro', textContent: response.data.Message, ok: 'Fechar' });\r\n\r\n                    $mdDialog.show(alert).finally(function () {\r\n                        alert = undefined;\r\n                    });\r\n                })\r\n            }\r\n\r\n            vm.carregarInformacao = function () {\r\n\r\n                if (tarefaId != 0) {\r\n\r\n                    tarefaService.obter(tarefaId).success(function (result) {\r\n                        vm.nomePessoa = result.NomePessoa;\r\n                        vm.descricao = result.Descricao;\r\n                        vm.status = result.idStatus;\r\n                    }).error(function (result) {\r\n                        var alert = $mdDialog.alert({ title: 'Erro', textContent: response.data.Message, ok: 'Fechar' });\r\n\r\n                        $mdDialog.show(alert).finally(function () {\r\n                            alert = undefined;\r\n                        });\r\n                    })\r\n                }\r\n            };\r\n\r\n            vm.carregarInformacao();\r\n        }\r\n    );\r\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./cadastros/Tarefa/views/modal.js\n// module id = 20\n// module chunks = 0"],"sourceRoot":""}